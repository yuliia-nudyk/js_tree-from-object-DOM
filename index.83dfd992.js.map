{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,ECwCA,AAlBA,SAAS,EAAW,CAAO,CAAE,CAAI,EAC/B,IAAM,EAAO,SAAS,aAAa,CAAC,MAEpC,OAAO,OAAO,CAAC,GAAM,OAAO,CAAC,SAA7B,CAAA,EAA+B,IAAA,E,A,S,C,E,G,M,O,C,G,O,C,EAAA,I,A,S,C,C,C,E,I,E,E,E,A,M,E,K,A,a,O,Q,C,C,O,Q,C,E,C,C,a,C,G,A,M,G,I,E,E,C,E,C,E,E,C,E,G,C,I,E,E,I,C,G,C,C,E,A,C,E,E,I,E,E,I,A,I,E,I,C,E,K,E,AAAA,I,E,M,E,E,C,G,C,M,E,C,E,C,E,E,C,Q,C,G,C,G,A,M,E,M,E,E,M,E,Q,C,G,E,M,C,C,C,O,E,EAAA,EAAA,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,EAAA,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,EAAA,G,EAAA,EAAA,I,A,W,M,A,U,6I,IAAA,EAAA,CAAA,CAAA,EAAA,CAAK,EAAL,CAAA,CAAA,EAAA,CACvB,EAAW,SAAS,aAAa,CAAC,KAExC,CAAA,EAAS,WAAW,CAAG,EAEvB,EAAK,MAAM,CAAC,GAER,OAAO,OAAO,CAAC,GAAO,MAAM,EAC9B,EAAW,EAAU,EAEzB,GAEA,EAAQ,MAAM,CAAC,EACjB,EAlBa,SAAS,aAAa,CAAC,SAlBvB,CACX,MAAO,CACL,KAAM,CAAC,EACP,QAAS,CAAC,CACZ,EAEA,MAAO,CACL,IAAK,CACH,OAAQ,CAAC,EACT,WAAY,CAAC,CACf,EACA,OAAQ,CACN,OAAQ,CAAC,EACT,UAAW,CAAC,CACd,CACF,CACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["'use strict';\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nfunction _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\nfunction _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar food = {\n    Drink: {\n        Wine: {},\n        Schnaps: {}\n    },\n    Fruit: {\n        Red: {\n            Cherry: {},\n            Strawberry: {}\n        },\n        Yellow: {\n            Banana: {},\n            Pineapple: {}\n        }\n    }\n};\nvar tree = document.querySelector('#tree');\nfunction createTree(element, data) {\n    var list = document.createElement('ul');\n    Object.entries(data).forEach(function(param) {\n        var _param = _sliced_to_array(param, 2), key = _param[0], value = _param[1];\n        var listItem = document.createElement('li');\n        listItem.textContent = key;\n        list.append(listItem);\n        if (Object.entries(value).length) createTree(listItem, value);\n    });\n    element.append(list);\n}\ncreateTree(tree, food);\n\n//# sourceMappingURL=index.83dfd992.js.map\n","'use strict';\n\nconst food = {\n  Drink: {\n    Wine: {},\n    Schnaps: {},\n  },\n\n  Fruit: {\n    Red: {\n      Cherry: {},\n      Strawberry: {},\n    },\n    Yellow: {\n      Banana: {},\n      Pineapple: {},\n    },\n  },\n};\n\nconst tree = document.querySelector('#tree');\n\nfunction createTree(element, data) {\n  const list = document.createElement('ul');\n\n  Object.entries(data).forEach(([key, value]) => {\n    const listItem = document.createElement('li');\n\n    listItem.textContent = key;\n\n    list.append(listItem);\n\n    if (Object.entries(value).length) {\n      createTree(listItem, value);\n    }\n  });\n\n  element.append(list);\n}\n\ncreateTree(tree, food);\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","createTree","element","data","list","document","createElement","Object","entries","forEach","param","_param","_array_with_holes","isArray","_iterable_to_array_limit","_s","_e","_i","Symbol","iterator","_arr","_n","_d","call","next","done","push","value","err","_unsupported_iterable_to_array","o","minLen","n","prototype","toString","slice","constructor","name","from","test","_non_iterable_rest","TypeError","key","listItem","textContent","append","querySelector","Drink","Wine","Schnaps","Fruit","Red","Cherry","Strawberry","Yellow","Banana","Pineapple"],"version":3,"file":"index.83dfd992.js.map"}